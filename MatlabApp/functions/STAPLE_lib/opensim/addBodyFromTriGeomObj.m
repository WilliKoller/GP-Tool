% ADDBODYFROMTRIGEOMOBJ Create an OpenSim Body from a MATLAB triangulation
% object. Requires a name.
%
%   osim_body = addBodyFromTriGeomObj(osimModel, triGeom,...
%                                     body_name, vis_mesh_file,...
%                                     body_density, in_mm)
%
% Inputs:
%   osimModel - an OpenSim model to which the body created from
%       triangulation object will be added.
%
%   triGeom - a MATLAB triangulation object.
%
%   body_name - a string indicating the name to assign to the OpenSim body.
%
%   vis_mesh_file - the path of the visualisation file that will be
%       assigned to the OpenSim body. For automatic models, this will be an
%       object file generated by writeModelGeometriesFolder.
%
%   body_density - (optional) the density assigned to the triangulation
%       objects when computing the mass properties. Default value is 1420
%       Kg/m^3, which is the density assigned to bone in Dumas et al. 
%       IEEE Transactions on Biomedical engineering (2005). In the
%       generation of automatic lower extremity models this value is
%       overwritten by mass properties estimated through regression
%       equations. The purpose of computing them is to provide a reasonable
%       first estimate.
%       
%   in_mm - (optional) indicates if the provided geometries are given in mm
%       (value: 1) or m (value: 0). Please note that all tests and analyses
%       done so far were performed on geometries expressed in mm, so this
%       option is more a placeholder for future adjustments.
%
% Outputs:
%   osim_body - the OpenSim body created from the MATLAB triangulation
%       object.
%
% See also LOAD_MESH, WRITEMODELGEOMETRIESFOLDER,
% ADDBODIESFROMTRIGEOMBONESET.
%
%-------------------------------------------------------------------------%
%  Author:   Luca Modenese
%  Copyright 2020 Luca Modenese
%-------------------------------------------------------------------------%

function osim_body = addBodyFromTriGeomObj(osimModel, triGeom, body_name, vis_mesh_file, body_density, in_mm)

% OpenSim libraries
import org.opensim.modeling.*

% defaults and dimensional scales
if nargin<6; in_mm = 1; end
if in_mm == 1; dim_fact = 0.001; else; dim_fact = 1; end
% bone density is defined in addBodiesFromTriGeomBoneSet
% if nargin<5; body_density = 1420*dim_fact^3;end % bone density by default (Dumas 2005)

% compute mass properties
% NOTE: when creating automated models this initial mass properties are
% overwritten by mapping proper segment inertial properties and scaling
% them.
boneMassProps= computeMassProperties_Mirtich1996(triGeom.Points, triGeom.ConnectivityList);
bone_mass    = boneMassProps.mass * body_density; % vol [mm^3] * density [kg/mm^3] 
bone_COP     = boneMassProps.COM  * dim_fact; 
bone_inertia = boneMassProps.Ivec * body_density* dim_fact^2; % Ivec [mm^3 * mm^2] * density [kg/mm^3] 

% create opensim body
osim_body    =  Body( body_name,...
                bone_mass,... 
                ArrayDouble.createVec3(bone_COP),...
                Inertia(bone_inertia(1), bone_inertia(2), bone_inertia(3),... 
                        bone_inertia(4), bone_inertia(5), bone_inertia(6))...
               );

% add body to model
osimModel.addBody(osim_body);

% add visualization mesh
if nargin>3
    vis_geom = Mesh(vis_mesh_file);
    vis_geom.set_scale_factors(Vec3(dim_fact));
    osim_body.attachGeometry(vis_geom);
% else
%     % untested for now - not needed if writeModelGeometriesFolder is used
%     geom_folder = 'Geometries';
%     if ~isfolder(geom_folder); mkdir(geom_folder); end
%     writeOBJfile(triGeom, fullfile(geom_folder,[body_name,'.obj']));
%     warndlg(['Body ', body_name, ' will not have an associated geometry. Using the triangulated object for visualization (stored in folder ''Geometries''.']);
end

end